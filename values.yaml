# Default values for helm-core-framework.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

replicaCount: 1

image:
  repository: 'GLOBAL_BASE_IMAGE'
  tag: latest
  pullPolicy: IfNotPresent
  separator: '@'

deployment:
  enabled: true
  containerPort: 8080   #IMPORTANT: make sure the healthCheck section of the ingress-backend-config.yaml is configured properly
  resources:
    requests:
      memory: "512Mi"
      # adjust this to the amount of storage your container should have
      ephemeralStorage: "1Gi"
      cpu: "500m"
    limits:
      memory: "512Mi"
      # adjust this to the amount of storage your container should have
      ephemeralStorage: "1Gi"
      cpu: "500m"

serviceAccount:
  # Specifies whether a service account should be created
  enabled: true
  # Automatically mount a ServiceAccount's API credentials?
  automount: true
  # Annotations to add to the service account
  annotations:
    iam.gke.io/gcp-service-account: ''
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  # this needs to be same as SERVICE_NAME in `.env.ENVIRONMENT`
  # both for dev as well as prod.
  name: "helm-core-framework"

#Keep it true only if your application will do migrations or any other operations before starting the application
createHooks: false

service:
  enabled: true
  type: NodePort
  port: 80
  name: http


ingress:
  enabled: false
  type: external
  iap: false
  securityPolicy: "ip-allow-policy"
  className: ""
  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

httpRoute:
  enabled: false
  type: internal


################# Automatic values #################
# these values are overwritten by the helm-push action, so each helm chart has the proper values when pushed
# To use them in the templates, update them in gcp-automation-argocd/<ENV>/<TYPE_services>/<SERVICE_NAME>-values.yaml
mesh:
  enabled: false
  sqlHost: helm-core-framework-db-instance-development
  proxySubnet: 10.64.129.0/24 #dev
  sqlAddress: 10.64.128.61/32
  namespaceAccessLabel: "helm-core-framework.access: enabled"
#########################################################

################# Example: how to use cloudsqlproxy #################
cloudSql:
  useCloudsqlProxy: false
  instances: []
  verboseLogging: false
  enableIamLogin: true
# cloudSql:
#   useCloudsqlProxy: true
#   useTcp: true
#   verboseLogging: false
#   enableIamLogin: true
#   instances:
#    - cloudSqlInstanceName: my-project:region:my-cloud-sql-instance1
#      port: 5432
#    - cloudSqlInstanceName: my-project:region:my-cloud-sql-instance2
#      port: 5433
#########################################################

################# Add FUSE to use buckets ###############
cloudStorageMount:
  enabled: false
  readOnly: false
  mountPath: /data
  bucketName: bucket-name
  fileCacheCapacity: "0"
  mountOptions:
    - implicit-dirs
    - gid=3003
    - uid=1001
    - dir-mode=777
    - file-mode=777
#########################################################

autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 100
  targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80

otel:
  enabled: false

secrets:
  enabled: false
  env:
    # ENV_VAR_NAME_1: gcp-secret-name-1
    # ENV_VAR_NAME_2: gcp-secret-name-2
  secrets_project: bhd-secrets-dev

################# Automatic values #################
# these values are overwritten by the helm-push action, so each helm chart has the proper values when pushed
environment:
  name: dev
  # this needs to be same as SERVICE_NAME in the respective .env.development or .env.production file
  service_name: helm-core-framework
#########################################################
